DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'identity') THEN
        CREATE SCHEMA identity;
    END IF;
END $EF$;
CREATE TABLE IF NOT EXISTS identity."__EFMigrationsHistory" (
    migration_id character varying(150) NOT NULL,
    product_version character varying(32) NOT NULL,
    CONSTRAINT pk___ef_migrations_history PRIMARY KEY (migration_id)
);

START TRANSACTION;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
        IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'identity') THEN
            CREATE SCHEMA identity;
        END IF;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE TABLE identity.asp_net_roles (
        id text NOT NULL,
        name character varying(256),
        normalized_name character varying(256),
        concurrency_stamp text,
        CONSTRAINT pk_asp_net_roles PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE TABLE identity.asp_net_users (
        id text NOT NULL,
        user_name character varying(256),
        normalized_user_name character varying(256),
        email character varying(256),
        normalized_email character varying(256),
        email_confirmed boolean NOT NULL,
        password_hash text,
        security_stamp text,
        concurrency_stamp text,
        phone_number text,
        phone_number_confirmed boolean NOT NULL,
        two_factor_enabled boolean NOT NULL,
        lockout_end timestamp with time zone,
        lockout_enabled boolean NOT NULL,
        access_failed_count integer NOT NULL,
        CONSTRAINT pk_asp_net_users PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE TABLE identity.asp_net_role_claims (
        id integer GENERATED BY DEFAULT AS IDENTITY,
        role_id text NOT NULL,
        claim_type text,
        claim_value text,
        CONSTRAINT pk_asp_net_role_claims PRIMARY KEY (id),
        CONSTRAINT fk_asp_net_role_claims_asp_net_roles_role_id FOREIGN KEY (role_id) REFERENCES identity.asp_net_roles (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE TABLE identity.asp_net_user_claims (
        id integer GENERATED BY DEFAULT AS IDENTITY,
        user_id text NOT NULL,
        claim_type text,
        claim_value text,
        CONSTRAINT pk_asp_net_user_claims PRIMARY KEY (id),
        CONSTRAINT fk_asp_net_user_claims_asp_net_users_user_id FOREIGN KEY (user_id) REFERENCES identity.asp_net_users (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE TABLE identity.asp_net_user_logins (
        login_provider text NOT NULL,
        provider_key text NOT NULL,
        provider_display_name text,
        user_id text NOT NULL,
        CONSTRAINT pk_asp_net_user_logins PRIMARY KEY (login_provider, provider_key),
        CONSTRAINT fk_asp_net_user_logins_asp_net_users_user_id FOREIGN KEY (user_id) REFERENCES identity.asp_net_users (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE TABLE identity.asp_net_user_roles (
        user_id text NOT NULL,
        role_id text NOT NULL,
        CONSTRAINT pk_asp_net_user_roles PRIMARY KEY (user_id, role_id),
        CONSTRAINT fk_asp_net_user_roles_asp_net_roles_role_id FOREIGN KEY (role_id) REFERENCES identity.asp_net_roles (id) ON DELETE CASCADE,
        CONSTRAINT fk_asp_net_user_roles_asp_net_users_user_id FOREIGN KEY (user_id) REFERENCES identity.asp_net_users (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE TABLE identity.asp_net_user_tokens (
        user_id text NOT NULL,
        login_provider text NOT NULL,
        name text NOT NULL,
        value text,
        CONSTRAINT pk_asp_net_user_tokens PRIMARY KEY (user_id, login_provider, name),
        CONSTRAINT fk_asp_net_user_tokens_asp_net_users_user_id FOREIGN KEY (user_id) REFERENCES identity.asp_net_users (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE INDEX ix_asp_net_role_claims_role_id ON identity.asp_net_role_claims (role_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE UNIQUE INDEX "RoleNameIndex" ON identity.asp_net_roles (normalized_name);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE INDEX ix_asp_net_user_claims_user_id ON identity.asp_net_user_claims (user_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE INDEX ix_asp_net_user_logins_user_id ON identity.asp_net_user_logins (user_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE INDEX ix_asp_net_user_roles_role_id ON identity.asp_net_user_roles (role_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE INDEX "EmailIndex" ON identity.asp_net_users (normalized_email);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    CREATE UNIQUE INDEX "UserNameIndex" ON identity.asp_net_users (normalized_user_name);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250402222200_Add_Identity') THEN
    INSERT INTO identity."__EFMigrationsHistory" (migration_id, product_version)
    VALUES ('20250402222200_Add_Identity', '9.0.4');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250404132027_Add_RefreshToken') THEN
    CREATE TABLE identity.refresh_tokens (
        id uuid NOT NULL,
        user_id character varying(300) NOT NULL,
        token character varying(1000) NOT NULL,
        expires_at_utc timestamp with time zone NOT NULL,
        CONSTRAINT pk_refresh_tokens PRIMARY KEY (id),
        CONSTRAINT fk_refresh_tokens_users_user_id FOREIGN KEY (user_id) REFERENCES identity.asp_net_users (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250404132027_Add_RefreshToken') THEN
    CREATE UNIQUE INDEX ix_refresh_tokens_token ON identity.refresh_tokens (token);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250404132027_Add_RefreshToken') THEN
    CREATE INDEX ix_refresh_tokens_user_id ON identity.refresh_tokens (user_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM identity."__EFMigrationsHistory" WHERE "migration_id" = '20250404132027_Add_RefreshToken') THEN
    INSERT INTO identity."__EFMigrationsHistory" (migration_id, product_version)
    VALUES ('20250404132027_Add_RefreshToken', '9.0.4');
    END IF;
END $EF$;
COMMIT;

